{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/communication.ts","src/event.ts","src/handler.ts","src/index.ts"],"names":[],"mappings":"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","file":"page-communication.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// communication module\r\n// module Communication {\r\n\r\n// }\r\nimport { EventEmitter, Event } from './event';\r\n\r\nexport class PageSocket extends EventEmitter {\r\n    private _context: any;\r\n    private _target: string;\r\n\r\n    /**\r\n     * socket communication between pages\r\n     * @param context otherwindow\r\n     * @param target otherwindow origin\r\n     */\r\n    public constructor(context: any, target: string) {\r\n        super();\r\n        this._context = context;\r\n        this._target = target;\r\n        window.addEventListener(\"message\", this.receiveMessage, false);\r\n    }\r\n\r\n    private receiveMessage(event: any) {\r\n        let origin: any = event.origin || event.originalEvent.origin;\r\n        if (origin !== this._target) {\r\n            this.event(Event.Error, \"the target is error!\");\r\n        }\r\n        else {\r\n            this.event(Event.Message, event.data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send data to the destination page\r\n     * @param data string or arraybuffer\r\n     */\r\n    public send(data: any): void {\r\n        this._context.postMessage(data, this._target);\r\n    }\r\n}","import { Handler } from './handler';\r\n/**\r\n* @author confiner\r\n* @desc 可调度事件的所有类的基类。\r\n*/\r\n\r\n// module Communication {\r\n\r\n// }\r\nexport class Event {\r\n\tpublic static readonly Message: string = \"message\";\r\n\tpublic static readonly Error: string = \"error\";\r\n}\r\nexport class EventEmitter {\r\n\tprivate _eventList: any;\r\n\r\n\t/**\r\n\t * 检查 EvetEmitter 对象是否为特定事件类型注册了任何侦听器。\r\n\t * @param\ttype 事件的类型。\r\n\t * @return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。\r\n\t */\r\n\tpublic hasListener(type: string): boolean {\r\n\t\tlet listener: Object = this._eventList && this._eventList[type];\r\n\t\treturn !!listener;\r\n\t}\r\n\r\n\t/**\r\n\t * 派发事件。\r\n\t * @param type\t事件类型。\r\n\t * @param data\t（可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。\r\n\t * @return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。\r\n\t */\r\n\tpublic event(type: string, data: any = null): boolean {\r\n\t\tif (!this._eventList || !this._eventList[type])\r\n\t\t\treturn false;\r\n\r\n\t\tlet listeners: any = this._eventList[type];\r\n\t\tif (listeners.run) {\r\n\t\t\tif (listeners.once) delete this._eventList[type];\r\n\t\t\tdata != null ? listeners.runWith(data) : listeners.run();\r\n\t\t} else {\r\n\t\t\tfor (let i: number = 0, n: number = listeners.length; i < n; i++) {\r\n\t\t\t\tlet listener: Handler = listeners[i];\r\n\t\t\t\tif (listener) {\r\n\t\t\t\t\t(data != null) ? listener.runWith(data) : listener.run();\r\n\t\t\t\t}\r\n\t\t\t\tif (!listener || listener.once) {\r\n\t\t\t\t\tlisteners.splice(i, 1);\r\n\t\t\t\t\ti--;\r\n\t\t\t\t\tn--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (listeners.length === 0 && this._eventList) delete this._eventList[type];\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * 使用 EventEmmiter 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。\r\n\t * @param type\t\t事件的类型。\r\n\t * @param caller\t事件侦听函数的执行域。\r\n\t * @param listener\t事件侦听函数。\r\n\t * @param args\t\t（可选）事件侦听函数的回调参数。\r\n\t * @return 此 EvetEmitter 对象。\r\n\t */\r\n\tpublic on(type: string, caller: any, listener: Function, args: any = null): EventEmitter {\r\n\t\treturn this._createListener(type, caller, listener, args, false);\r\n\t}\r\n\r\n\t/**\r\n\t * 使用 EventEmitter 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。\r\n\t * @param type\t\t事件的类型。\r\n\t * @param caller\t事件侦听函数的执行域。\r\n\t * @param listener\t事件侦听函数。\r\n\t * @param args\t\t（可选）事件侦听函数的回调参数。\r\n\t * @return 此 EventEmitter 对象。\r\n\t */\r\n\tpublic once(type: string, caller: any, listener: Function, args: any = null): EventEmitter {\r\n\t\treturn this._createListener(type, caller, listener, args, true);\r\n\t}\r\n\r\n\t/**@private */\r\n\tpublic _createListener(type: string, caller: any, listener: Function, args: any, once: boolean, offBefore: Boolean = true): EventEmitter {\r\n\t\t//移除之前相同的监听\r\n\t\toffBefore && this.off(type, caller, listener, once);\r\n\r\n\t\t//使用对象池进行创建回收\r\n\t\tlet handler: Handler = Handler.create(caller || this, listener, args, once);\r\n\t\tthis._eventList || (this._eventList = {});\r\n\r\n\t\tlet events: any = this._eventList;\r\n\t\t//默认单个，每个对象只有多个监听才用数组，节省一个数组的消耗\r\n\t\tif (!events[type]) events[type] = handler;\r\n\t\telse {\r\n\t\t\tif (!events[type].run) events[type].push(handler);\r\n\t\t\telse events[type] = [events[type], handler];\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 从 EventEmitter 对象中删除侦听器。\r\n\t * @param type\t\t事件的类型。\r\n\t * @param caller\t事件侦听函数的执行域。\r\n\t * @param listener\t事件侦听函数。\r\n\t * @param onceOnly\t（可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。\r\n\t * @return 此 EventEmitter 对象。\r\n\t */\r\n\tpublic off(type: string, caller: any, listener: Function, onceOnly: boolean = false): EventEmitter {\r\n\t\tif (!this._eventList || !this._eventList[type]) return this;\r\n\r\n\t\tvar listeners: any = this._eventList[type];\r\n\t\tif (listener != null) {\r\n\t\t\tif (listeners[\"run\"]) {\r\n\t\t\t\tif ((!caller || listeners[\"caller\"] === caller) && listeners[\"method\"] === listener && (!onceOnly || listeners[\"once\"])) {\r\n\t\t\t\t\tdelete this._eventList[type];\r\n\t\t\t\t\tlisteners[\"recover\"].apply(this);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlet count: number = 0;\r\n\t\t\t\tlet n: number = listeners[\"length\"];\r\n\t\t\t\tfor (let i: number = 0; i < n; i++) {\r\n\t\t\t\t\tvar item: Handler = listeners[i];\r\n\t\t\t\t\tif (item && (!caller || item.caller === caller) && item.method === listener && (!onceOnly || item.once)) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\tlisteners[i] = null;\r\n\t\t\t\t\t\titem.recover();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//如果全部移除，则删除索引\r\n\t\t\t\tif (count === n) delete this._eventList[type];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * 从 EventEmitter 对象中删除指定事件类型的所有侦听器。\r\n\t * @param type\t（可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。\r\n\t * @return 此 EventEmitter 对象。\r\n\t */\r\n\tpublic offAll(type: string | null = null): EventEmitter {\r\n\t\tlet events: any = this._eventList;\r\n\t\tif (!events) return this;\r\n\t\tif (type) {\r\n\t\t\tthis._recoverHandlers(events[type]);\r\n\t\t\tdelete events[type];\r\n\t\t} else {\r\n\t\t\tfor (let name in events) {\r\n\t\t\t\tthis._recoverHandlers(events[name]);\r\n\t\t\t}\r\n\t\t\tthis._eventList = null;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _recoverHandlers(arr: any): void {\r\n\t\tif (!arr) return;\r\n\t\tif (arr.run) {\r\n\t\t\tarr.recover();\r\n\t\t} else {\r\n\t\t\tfor (let i: number = arr.length - 1; i > -1; i--) {\r\n\t\t\t\tif (arr[i]) {\r\n\t\t\t\t\tarr[i].recover();\r\n\t\t\t\t\tarr[i] = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// class EventHandler extends Handler {\r\n\r\n// \t/**@private handler对象池*/\r\n// \tprivate static _eventPool: Array<Handler> = [];\r\n\r\n// \tpublic constructor(caller: any, method: Function, args: any, once: boolean) {\r\n// \t\tsuper();\r\n// \t\tthis.setTo(caller, method, args, once);\r\n// \t}\r\n\r\n// \tpublic recover(): void {\r\n// \t\tif (this._id > 0) {\r\n// \t\t\tthis._id = 0;\r\n// \t\t\tEventHandler._eventPool.push(this.clear());\r\n// \t\t}\r\n// \t}\r\n\r\n// \t/**\r\n// \t * 从对象池内创建一个Handler，默认会执行一次回收，如果不需要自动回收，设置once参数为false。\r\n// \t * @param caller\t执行域(this)。\r\n// \t * @param method\t回调方法。\r\n// \t * @param args\t\t（可选）携带的参数。\r\n// \t * @param once\t\t（可选）是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。\r\n// \t * @return 返回创建的handler实例。\r\n// \t */\r\n// \tpublic static create(caller: any, method: Function, args: any = null, once: boolean = true): Handler {\r\n// \t\tif (EventHandler._eventPool.length)\r\n// \t\t\treturn (EventHandler._eventPool.pop()).setTo(caller, method, args, once);\r\n// \t\treturn new EventHandler(caller, method, args, once);\r\n// \t}\r\n// }\r\n","// module Communication {\r\n\r\n// }\r\n\r\nexport class Handler {\r\n    private static _pool: Array<any> = [];\r\n    private static _gid: number = 1;\r\n    public caller: any = null;\r\n    public method: Function | null = null;\r\n    public args: Array<any> | null = null;\r\n    public once: Boolean = false;\r\n\r\n    protected _id: number = 0;\r\n\r\n    /**\r\n     * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。\r\n     * @param\tcaller 执行域。\r\n     * @param\tmethod 处理函数。\r\n     * @param\targs 函数参数。\r\n     * @param\tonce 是否只执行一次。\r\n     */\r\n    public constructor(caller: any = null, method: Function | null = null, args: Array<any> | null = null, once: Boolean = false) {\r\n        this.setTo(caller, method, args, once);\r\n    }\r\n\r\n    /**\r\n     * 设置此对象的指定属性值。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 回调方法。\r\n     * @param\targs 携带的参数。\r\n     * @param\tonce 是否只执行一次，如果为true，执行后执行recover()进行回收。\r\n     * @return  返回 handler 本身。\r\n     */\r\n    public setTo(caller: any, method: Function | null, args: Array<any> | null, once: Boolean): Handler {\r\n        this._id = Handler._gid++;\r\n        this.caller = caller;\r\n        this.method = method;\r\n        this.args = args;\r\n        this.once = once;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 执行处理器。\r\n     */\r\n    public run(): any {\r\n        if (!this.method) return null;\r\n        let id: number = this._id;\r\n        console.log(this.method);\r\n        var result: any = this.method.apply(this.caller, this.args);\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 执行处理器，携带额外数据。\r\n     * @param\tdata 附加的回调数据，Array\r\n     */\r\n    public runWith(data: any): any {\r\n        if (!this.method) return null;\r\n        var id: number = this._id;\r\n        let result: any = null;\r\n        if (!data)\r\n            result = this.method.apply(this.caller, this.args);\r\n        else if (this.args) {\r\n            result = this.method.apply(this.caller, this.args.concat(data));\r\n        }\r\n        else {\r\n            console.log(this.method);\r\n            result = this.method.apply(this.caller, data);\r\n        }\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 清理对象引用。\r\n     */\r\n    public clear(): Handler {\r\n        this.caller = null;\r\n        this.method = null;\r\n        this.args = null;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 清理并回收到 Handler 对象池内。\r\n     */\r\n    public recover(): void {\r\n        if (this._id > 0) {\r\n            this._id = 0;\r\n            Handler._pool.push(this.clear());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 回调方法。\r\n     * @param\targs 携带的参数。\r\n     * @param\tonce 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。\r\n     * @return  返回创建的handler实例。\r\n     */\r\n    public static create(caller: any, method: Function, args: any = null, once: Boolean = true): Handler {\r\n        if (Handler._pool.length) return Handler._pool.pop().setTo(caller, method, args, once);\r\n        return new Handler(caller, method, args, once);\r\n    }\r\n}\r\n","export * from \"./communication\";\r\nexport * from \"./event\";\r\nexport * from \"./handler\";\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}